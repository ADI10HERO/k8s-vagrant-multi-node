# $box_image must be set in each Vagrantfile set.

# Disk setup
DISK_COUNT = ENV["DISK_COUNT"].to_i || 2
DISK_SIZE_GB = ENV["DISK_SIZE_GB"].to_i || 10

# Resources
MASTER_CPUS = ENV['MASTER_CPUS'].to_i || 2
MASTER_MEMORY_SIZE_GB = ENV['MASTER_MEMORY_SIZE_GB'].to_i || 2
NODE_CPUS = ENV['NODE_CPUS'].to_i || 1
NODE_MEMORY_SIZE_GB = ENV['NODE_MEMORY_SIZE_GB'].to_i || 1

# BOX OS specific fixes
$diskIDModifier = 0
# currently only used by ubuntu
$docker_version = ''

# Network
NODE = ENV['NODE'].to_i || 1

MASTER_IP = ENV["MASTER_IP"] || '192.168.26.10'
POD_NW_CIDR = ENV["POD_NW_CIDR"] || '10.244.0.0/16'
NODE_IP_NW = ENV['NODE_IP_NW'] || '192.168.26.'
NODE_IP = NODE_IP_NW + (NODE + 10).to_s

# Addons
K8S_DASHBOARD = ENV['K8S_DASHBOARD'] || false
K8S_DASHBOARD_VERSION = ENV['K8S_DASHBOARD_VERSION'] || 'v1.10.1'

# Kubernetes and kubeadm
KUBERNETES_VERSION = ENV["KUBERNETES_VERSION"] || ''
$kubernetes_pkg_version_suffix = ENV["KUBERNETES_PKG_VERSION_SUFFIX"] || ""
$kubeadm_init_flags = ENV["KUBEADM_INIT_FLAGS"] || ''
$kubeadm_join_flags = ENV["KUBEADM_JOIN_FLAGS"] || ''
if KUBERNETES_VERSION != "" && $kubeadm_init_flags == ""
    $kubeadm_init_flags = "--kubernetes-version=#{KUBERNETES_VERSION}"
end
KUBE_NETWORK = ENV['KUBE_NETWORK'] || 'flannel'
KUBE_PROXY_IPVS = ENV['KUBE_PROXY_IPVS'] || false

# Generate new using steps in README
KUBETOKEN = ENV["KUBETOKEN"] || 'b029ee.968a33e8d8e6bb0d'

# The controller name is different per OS it seems (this is the case for at least Ubuntu right now).
# For more information, see https://github.com/kusnier/vagrant-persistent-storage/issues/33.
$storagecontroller = 'k8svmSATAController'
$storagecontrollerneedstobecreated = true

# Common scripts
$osPrepareScript = ""

$prepareScript = <<SCRIPT
swapoff -a
sed -i '/swap/s/^/#/g' /etc/fstab

modprobe br_netfilter
cat << EOF > /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 0
net.ipv6.conf.default.disable_ipv6 = 0
net.ipv6.conf.lo.disable_ipv6 = 0
net.ipv6.conf.all.accept_dad = 0
net.ipv6.conf.default.accept_dad = 0
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl -p /etc/sysctl.conf

cat << EOF > /etc/modules-load.d/ipvs.conf
overlay
br_netfilter
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack
nf_conntrack_ipv6
EOF

# Set mtu of ethernet devices lower, otherwise there may be issues when using a VPN
cat <<EOF > /etc/systemd/system/ip-set-mtu.service
[Unit]
After=network.target
[Service]
Type=oneshot
ExecStart=/bin/bash -c 'ip link set mtu 1300 dev eth0'
ExecStart=/bin/bash -c 'ip link set mtu 1300 dev eth1'
[Install]
WantedBy=default.target
EOF
systemctl daemon-reload
systemctl enable ip-set-mtu.service
systemctl start ip-set-mtu.service
SCRIPT

$kubeMasterScript = <<SCRIPT
set -x
kubeadm reset -f

retries=5
for ((i=0; i<retries; i++)); do
    # For now ignore SystemVerification error
    kubeadm init \
        #{$kubeadm_init_flags} \
        --ignore-preflight-errors=SystemVerification \
        --apiserver-advertise-address=#{MASTER_IP} \
        --pod-network-cidr=#{POD_NW_CIDR} \
        --token "#{KUBETOKEN}" \
        --token-ttl 0 && \
        break
    echo "kubeadm join failed, trying again in 3 seconds (try ${i}/${retries})..."
    sleep 3
done
[[ $retries -eq i ]] && { echo "Failed to run kubeadm init after 5 tries"; exit 1; }

KUBELET_EXTRA_ARGS_FILE=/etc/sysconfig/kubelet
if [ ! -f /etc/sysconfig/kubelet ]; then
    KUBELET_EXTRA_ARGS_FILE=/etc/default/kubelet
fi

if grep -q -- '--node-ip=' "$KUBELET_EXTRA_ARGS_FILE"; then
    sed -ri -e 's/KUBELET_EXTRA_ARGS=--node-ip=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/KUBELET_EXTRA_ARGS=/' "$KUBELET_EXTRA_ARGS_FILE"
fi
sed -i 's/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=--node-ip=#{NODE_IP} /' "$KUBELET_EXTRA_ARGS_FILE"

systemctl daemon-reload
systemctl restart kubelet.service

mkdir -p $HOME/.kube
cp -Rf /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
if [ "#{KUBE_NETWORK}" == "flannel" ]; then
    curl --retry 5 --fail -s https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml | \
        awk '/- --kube-subnet-mgr/{print "        - --iface=eth1"}1' | \
        kubectl apply -f -
elif [ "#{KUBE_NETWORK}" == "canal" ]; then
    curl --retry 5 --fail -s https://docs.projectcalico.org/v3.5/getting-started/kubernetes/installation/hosted/canal/canal.yaml | \
        sed 's/canal_iface: ""/canal_iface: "eth1"/' | \
        kubectl apply -f -
fi
SCRIPT

$kubeMinionScript = <<SCRIPT
set -x
kubeadm reset -f

retries=5
for ((i=0; i<retries; i++)); do
    # For now ignore SystemVerification error
    kubeadm join \
        #{$kubeadm_join_flags} \
        --ignore-preflight-errors=SystemVerification \
        --discovery-token-unsafe-skip-ca-verification \
        --token "#{KUBETOKEN}" \
        "#{MASTER_IP}:6443" && \
        break
    echo "kubeadm join failed, trying again in 3 seconds (try ${i}/${retries})..."
    sleep 3
done
[[ $retries -eq i ]] && { echo "Failed to run kubeadm join after 5 tries"; exit 1; }

KUBELET_EXTRA_ARGS_FILE=/etc/sysconfig/kubelet
if [ ! -f /etc/sysconfig/kubelet ]; then
    KUBELET_EXTRA_ARGS_FILE=/etc/default/kubelet
fi

if grep -q -- '--node-ip=' "$KUBELET_EXTRA_ARGS_FILE"; then
    sed -ri -e 's/KUBELET_EXTRA_ARGS=--node-ip=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/KUBELET_EXTRA_ARGS=/' "$KUBELET_EXTRA_ARGS_FILE"
fi
sed -i 's/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=--node-ip=#{NODE_IP} /' "$KUBELET_EXTRA_ARGS_FILE"

systemctl daemon-reload
systemctl restart kubelet.service
SCRIPT

# Addons
$kubeDashScript = <<SCRIPT
# Kubernetes Dashboard Setup
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/#{K8S_DASHBOARD_VERSION}/src/deploy/recommended/kubernetes-dashboard.yaml
SCRIPT
